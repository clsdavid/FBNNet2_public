// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// extractGeneStateFromTimeSeriesCube
Rcpp::NumericMatrix extractGeneStateFromTimeSeriesCube(Rcpp::List timeSeriesCube, Rcpp::IntegerVector temporal);
RcppExport SEXP _FBNNet_extractGeneStateFromTimeSeriesCube(SEXP timeSeriesCubeSEXP, SEXP temporalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type timeSeriesCube(timeSeriesCubeSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type temporal(temporalSEXP);
    rcpp_result_gen = Rcpp::wrap(extractGeneStateFromTimeSeriesCube(timeSeriesCube, temporal));
    return rcpp_result_gen;
END_RCPP
}
// extractGeneStates
Rcpp::NumericMatrix extractGeneStates(Rcpp::NumericMatrix stateMatrix, Rcpp::CharacterVector targetgenes);
RcppExport SEXP _FBNNet_extractGeneStates(SEXP stateMatrixSEXP, SEXP targetgenesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type stateMatrix(stateMatrixSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type targetgenes(targetgenesSEXP);
    rcpp_result_gen = Rcpp::wrap(extractGeneStates(stateMatrix, targetgenes));
    return rcpp_result_gen;
END_RCPP
}
// generateTemporalGeneStates
Rcpp::List generateTemporalGeneStates(Rcpp::Environment mainParameters, Rcpp::CharacterVector targetgene, Rcpp::CharacterVector conditional_genes, Rcpp::IntegerVector temporal);
RcppExport SEXP _FBNNet_generateTemporalGeneStates(SEXP mainParametersSEXP, SEXP targetgeneSEXP, SEXP conditional_genesSEXP, SEXP temporalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type mainParameters(mainParametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type targetgene(targetgeneSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type conditional_genes(conditional_genesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type temporal(temporalSEXP);
    rcpp_result_gen = Rcpp::wrap(generateTemporalGeneStates(mainParameters, targetgene, conditional_genes, temporal));
    return rcpp_result_gen;
END_RCPP
}
// getBasicMeasures
Rcpp::List getBasicMeasures(Rcpp::NumericVector stateTCond, Rcpp::NumericMatrix m, Rcpp::NumericMatrix mc, Rcpp::NumericVector cond_T_target_T_state, Rcpp::NumericVector cond_F_target_T_state, Rcpp::NumericVector cond_T_target_F_state, Rcpp::NumericVector cond_F_target_F_state, Rcpp::NumericVector cond_T_target_T_state_c, Rcpp::NumericVector cond_F_target_T_state_c, Rcpp::NumericVector cond_T_target_F_state_c, Rcpp::NumericVector cond_F_target_F_state_c, bool recount_target);
RcppExport SEXP _FBNNet_getBasicMeasures(SEXP stateTCondSEXP, SEXP mSEXP, SEXP mcSEXP, SEXP cond_T_target_T_stateSEXP, SEXP cond_F_target_T_stateSEXP, SEXP cond_T_target_F_stateSEXP, SEXP cond_F_target_F_stateSEXP, SEXP cond_T_target_T_state_cSEXP, SEXP cond_F_target_T_state_cSEXP, SEXP cond_T_target_F_state_cSEXP, SEXP cond_F_target_F_state_cSEXP, SEXP recount_targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type stateTCond(stateTCondSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type mc(mcSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cond_T_target_T_state(cond_T_target_T_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cond_F_target_T_state(cond_F_target_T_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cond_T_target_F_state(cond_T_target_F_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cond_F_target_F_state(cond_F_target_F_stateSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cond_T_target_T_state_c(cond_T_target_T_state_cSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cond_F_target_T_state_c(cond_F_target_T_state_cSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cond_T_target_F_state_c(cond_T_target_F_state_cSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type cond_F_target_F_state_c(cond_F_target_F_state_cSEXP);
    Rcpp::traits::input_parameter< bool >::type recount_target(recount_targetSEXP);
    rcpp_result_gen = Rcpp::wrap(getBasicMeasures(stateTCond, m, mc, cond_T_target_T_state, cond_F_target_T_state, cond_T_target_F_state, cond_F_target_F_state, cond_T_target_T_state_c, cond_F_target_T_state_c, cond_T_target_F_state_c, cond_F_target_F_state_c, recount_target));
    return rcpp_result_gen;
END_RCPP
}
// getGenePrababilities_basic
Rcpp::List getGenePrababilities_basic(Rcpp::Environment main_parameters_in_ref, Rcpp::Nullable<Rcpp::List> fixedgenestate, Rcpp::CharacterVector target_gene, Rcpp::CharacterVector new_conditional_gene, Rcpp::IntegerVector temporal, Rcpp::Nullable<Rcpp::List> targetCounts);
RcppExport SEXP _FBNNet_getGenePrababilities_basic(SEXP main_parameters_in_refSEXP, SEXP fixedgenestateSEXP, SEXP target_geneSEXP, SEXP new_conditional_geneSEXP, SEXP temporalSEXP, SEXP targetCountsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type main_parameters_in_ref(main_parameters_in_refSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type fixedgenestate(fixedgenestateSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type target_gene(target_geneSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type new_conditional_gene(new_conditional_geneSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type temporal(temporalSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type targetCounts(targetCountsSEXP);
    rcpp_result_gen = Rcpp::wrap(getGenePrababilities_basic(main_parameters_in_ref, fixedgenestate, target_gene, new_conditional_gene, temporal, targetCounts));
    return rcpp_result_gen;
END_RCPP
}
// getAdvancedMeasures
Rcpp::List getAdvancedMeasures(const Rcpp::List basic_measures);
RcppExport SEXP _FBNNet_getAdvancedMeasures(SEXP basic_measuresSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type basic_measures(basic_measuresSEXP);
    rcpp_result_gen = Rcpp::wrap(getAdvancedMeasures(basic_measures));
    return rcpp_result_gen;
END_RCPP
}
// getGenePrababilities_advanced
Rcpp::List getGenePrababilities_advanced(const Rcpp::List getGenePrababilities_basic);
RcppExport SEXP _FBNNet_getGenePrababilities_advanced(SEXP getGenePrababilities_basicSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type getGenePrababilities_basic(getGenePrababilities_basicSEXP);
    rcpp_result_gen = Rcpp::wrap(getGenePrababilities_advanced(getGenePrababilities_basic));
    return rcpp_result_gen;
END_RCPP
}
// getGenePrababilities
Rcpp::List getGenePrababilities(Rcpp::Environment main_parameters_in_ref, Rcpp::Nullable<Rcpp::List> fixedgenestate, Rcpp::CharacterVector target_gene, Rcpp::CharacterVector new_conditional_gene, Rcpp::IntegerVector temporal, Rcpp::Nullable<Rcpp::List> targetCounts);
RcppExport SEXP _FBNNet_getGenePrababilities(SEXP main_parameters_in_refSEXP, SEXP fixedgenestateSEXP, SEXP target_geneSEXP, SEXP new_conditional_geneSEXP, SEXP temporalSEXP, SEXP targetCountsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Environment >::type main_parameters_in_ref(main_parameters_in_refSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type fixedgenestate(fixedgenestateSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type target_gene(target_geneSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type new_conditional_gene(new_conditional_geneSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type temporal(temporalSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type targetCounts(targetCountsSEXP);
    rcpp_result_gen = Rcpp::wrap(getGenePrababilities(main_parameters_in_ref, fixedgenestate, target_gene, new_conditional_gene, temporal, targetCounts));
    return rcpp_result_gen;
END_RCPP
}
// networkFiltering
Rcpp::List networkFiltering(Rcpp::List res);
RcppExport SEXP _FBNNet_networkFiltering(SEXP resSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type res(resSEXP);
    rcpp_result_gen = Rcpp::wrap(networkFiltering(res));
    return rcpp_result_gen;
END_RCPP
}
// getGenePrababilities_measurements
Rcpp::List getGenePrababilities_measurements(Rcpp::CharacterVector targetGene, Rcpp::Environment mainParameters, Rcpp::CharacterVector genes, Rcpp::Nullable<Rcpp::List> matchedgenes, Rcpp::IntegerVector temporal, Nullable<Rcpp::List> targetCounts);
RcppExport SEXP _FBNNet_getGenePrababilities_measurements(SEXP targetGeneSEXP, SEXP mainParametersSEXP, SEXP genesSEXP, SEXP matchedgenesSEXP, SEXP temporalSEXP, SEXP targetCountsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type targetGene(targetGeneSEXP);
    Rcpp::traits::input_parameter< Rcpp::Environment >::type mainParameters(mainParametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type genes(genesSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type matchedgenes(matchedgenesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type temporal(temporalSEXP);
    Rcpp::traits::input_parameter< Nullable<Rcpp::List> >::type targetCounts(targetCountsSEXP);
    rcpp_result_gen = Rcpp::wrap(getGenePrababilities_measurements(targetGene, mainParameters, genes, matchedgenes, temporal, targetCounts));
    return rcpp_result_gen;
END_RCPP
}
// buildProbabilityTreeOnTargetGene
Rcpp::List buildProbabilityTreeOnTargetGene(Rcpp::CharacterVector targetGene, Rcpp::Environment mainParameters, Rcpp::CharacterVector genes, Rcpp::Nullable<Rcpp::List> matchedgenes, Rcpp::Nullable<Rcpp::CharacterVector> matchedexpression, Rcpp::IntegerVector maxK, Rcpp::IntegerVector temporal, Nullable<Rcpp::List> targetCounts, bool findPositiveRegulate, bool findNegativeRegulate);
RcppExport SEXP _FBNNet_buildProbabilityTreeOnTargetGene(SEXP targetGeneSEXP, SEXP mainParametersSEXP, SEXP genesSEXP, SEXP matchedgenesSEXP, SEXP matchedexpressionSEXP, SEXP maxKSEXP, SEXP temporalSEXP, SEXP targetCountsSEXP, SEXP findPositiveRegulateSEXP, SEXP findNegativeRegulateSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type targetGene(targetGeneSEXP);
    Rcpp::traits::input_parameter< Rcpp::Environment >::type mainParameters(mainParametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type genes(genesSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type matchedgenes(matchedgenesSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::CharacterVector> >::type matchedexpression(matchedexpressionSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type temporal(temporalSEXP);
    Rcpp::traits::input_parameter< Nullable<Rcpp::List> >::type targetCounts(targetCountsSEXP);
    Rcpp::traits::input_parameter< bool >::type findPositiveRegulate(findPositiveRegulateSEXP);
    Rcpp::traits::input_parameter< bool >::type findNegativeRegulate(findNegativeRegulateSEXP);
    rcpp_result_gen = Rcpp::wrap(buildProbabilityTreeOnTargetGene(targetGene, mainParameters, genes, matchedgenes, matchedexpression, maxK, temporal, targetCounts, findPositiveRegulate, findNegativeRegulate));
    return rcpp_result_gen;
END_RCPP
}
// process_cube_algorithm
Rcpp::List process_cube_algorithm(Rcpp::CharacterVector target_gene, Rcpp::CharacterVector conditional_genes, Rcpp::IntegerVector maxK, Rcpp::IntegerVector temporal, Rcpp::Environment mainParameters);
RcppExport SEXP _FBNNet_process_cube_algorithm(SEXP target_geneSEXP, SEXP conditional_genesSEXP, SEXP maxKSEXP, SEXP temporalSEXP, SEXP mainParametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type target_gene(target_geneSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type conditional_genes(conditional_genesSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type maxK(maxKSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type temporal(temporalSEXP);
    Rcpp::traits::input_parameter< Rcpp::Environment >::type mainParameters(mainParametersSEXP);
    rcpp_result_gen = Rcpp::wrap(process_cube_algorithm(target_gene, conditional_genes, maxK, temporal, mainParameters));
    return rcpp_result_gen;
END_RCPP
}
// to_string
std::string to_string(double val);
RcppExport SEXP _FBNNet_to_string(SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(to_string(val));
    return rcpp_result_gen;
END_RCPP
}
// mpaste
Rcpp::String mpaste(Rcpp::CharacterVector x, std::string sep);
RcppExport SEXP _FBNNet_mpaste(SEXP xSEXP, SEXP sepSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type sep(sepSEXP);
    rcpp_result_gen = Rcpp::wrap(mpaste(x, sep));
    return rcpp_result_gen;
END_RCPP
}
// concatenator
Rcpp::CharacterVector concatenator(Rcpp::CharacterVector a, Rcpp::CharacterVector b);
RcppExport SEXP _FBNNet_concatenator(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(concatenator(a, b));
    return rcpp_result_gen;
END_RCPP
}
// concatenatorI
Rcpp::IntegerVector concatenatorI(Rcpp::IntegerVector a, Rcpp::IntegerVector b);
RcppExport SEXP _FBNNet_concatenatorI(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(concatenatorI(a, b));
    return rcpp_result_gen;
END_RCPP
}
// concatenatorN
Rcpp::NumericVector concatenatorN(Rcpp::NumericVector a, Rcpp::NumericVector b);
RcppExport SEXP _FBNNet_concatenatorN(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(concatenatorN(a, b));
    return rcpp_result_gen;
END_RCPP
}
// mcbind
Rcpp::NumericMatrix mcbind(Rcpp::NumericMatrix a, Rcpp::NumericMatrix b);
RcppExport SEXP _FBNNet_mcbind(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(mcbind(a, b));
    return rcpp_result_gen;
END_RCPP
}
// mrbind
Rcpp::NumericMatrix mrbind(Rcpp::NumericMatrix a, Rcpp::NumericMatrix b);
RcppExport SEXP _FBNNet_mrbind(SEXP aSEXP, SEXP bSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type a(aSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type b(bSEXP);
    rcpp_result_gen = Rcpp::wrap(mrbind(a, b));
    return rcpp_result_gen;
END_RCPP
}
// isReallyNA
bool isReallyNA(double val);
RcppExport SEXP _FBNNet_isReallyNA(SEXP valSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type val(valSEXP);
    rcpp_result_gen = Rcpp::wrap(isReallyNA(val));
    return rcpp_result_gen;
END_RCPP
}
// countZeros
int countZeros(Rcpp::NumericVector v);
RcppExport SEXP _FBNNet_countZeros(SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(countZeros(v));
    return rcpp_result_gen;
END_RCPP
}
// fisher_test_cpp
Rcpp::List fisher_test_cpp(const Rcpp::NumericMatrix& x, double conf_level);
RcppExport SEXP _FBNNet_fisher_test_cpp(SEXP xSEXP, SEXP conf_levelSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type conf_level(conf_levelSEXP);
    rcpp_result_gen = Rcpp::wrap(fisher_test_cpp(x, conf_level));
    return rcpp_result_gen;
END_RCPP
}
// substractM
Rcpp::NumericMatrix substractM(Rcpp::NumericMatrix m, Rcpp::NumericVector v);
RcppExport SEXP _FBNNet_substractM(SEXP mSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(substractM(m, v));
    return rcpp_result_gen;
END_RCPP
}
// matchCount
int matchCount(Rcpp::NumericMatrix m, Rcpp::NumericVector v);
RcppExport SEXP _FBNNet_matchCount(SEXP mSEXP, SEXP vSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type v(vSEXP);
    rcpp_result_gen = Rcpp::wrap(matchCount(m, v));
    return rcpp_result_gen;
END_RCPP
}
// dround
double dround(double val, int decimal);
RcppExport SEXP _FBNNet_dround(SEXP valSEXP, SEXP decimalSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type val(valSEXP);
    Rcpp::traits::input_parameter< int >::type decimal(decimalSEXP);
    rcpp_result_gen = Rcpp::wrap(dround(val, decimal));
    return rcpp_result_gen;
END_RCPP
}
// a_in_b
Rcpp::LogicalVector a_in_b(Rcpp::CharacterVector names1, Rcpp::CharacterVector names2);
RcppExport SEXP _FBNNet_a_in_b(SEXP names1SEXP, SEXP names2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type names1(names1SEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type names2(names2SEXP);
    rcpp_result_gen = Rcpp::wrap(a_in_b(names1, names2));
    return rcpp_result_gen;
END_RCPP
}
// a_in_b_index
Rcpp::IntegerVector a_in_b_index(Rcpp::CharacterVector names1, Rcpp::CharacterVector names2);
RcppExport SEXP _FBNNet_a_in_b_index(SEXP names1SEXP, SEXP names2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type names1(names1SEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type names2(names2SEXP);
    rcpp_result_gen = Rcpp::wrap(a_in_b_index(names1, names2));
    return rcpp_result_gen;
END_RCPP
}
// a_not_in_b
Rcpp::LogicalVector a_not_in_b(Rcpp::CharacterVector names1, Rcpp::CharacterVector names2);
RcppExport SEXP _FBNNet_a_not_in_b(SEXP names1SEXP, SEXP names2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type names1(names1SEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type names2(names2SEXP);
    rcpp_result_gen = Rcpp::wrap(a_not_in_b(names1, names2));
    return rcpp_result_gen;
END_RCPP
}
// a_not_in_b_index
Rcpp::IntegerVector a_not_in_b_index(Rcpp::CharacterVector names1, Rcpp::CharacterVector names2);
RcppExport SEXP _FBNNet_a_not_in_b_index(SEXP names1SEXP, SEXP names2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type names1(names1SEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type names2(names2SEXP);
    rcpp_result_gen = Rcpp::wrap(a_not_in_b_index(names1, names2));
    return rcpp_result_gen;
END_RCPP
}
// resizel
Rcpp::List resizel(const Rcpp::List& x, int n);
RcppExport SEXP _FBNNet_resizel(SEXP xSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(resizel(x, n));
    return rcpp_result_gen;
END_RCPP
}
// orderByname
Rcpp::List orderByname(const Rcpp::List& x, Rcpp::CharacterVector names);
RcppExport SEXP _FBNNet_orderByname(SEXP xSEXP, SEXP namesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type names(namesSEXP);
    rcpp_result_gen = Rcpp::wrap(orderByname(x, names));
    return rcpp_result_gen;
END_RCPP
}
// removeEmptyElement
Rcpp::List removeEmptyElement(Rcpp::List x);
RcppExport SEXP _FBNNet_removeEmptyElement(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(removeEmptyElement(x));
    return rcpp_result_gen;
END_RCPP
}
// char_sort
Rcpp::CharacterVector char_sort(Rcpp::CharacterVector x, bool dsc);
RcppExport SEXP _FBNNet_char_sort(SEXP xSEXP, SEXP dscSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type dsc(dscSEXP);
    rcpp_result_gen = Rcpp::wrap(char_sort(x, dsc));
    return rcpp_result_gen;
END_RCPP
}
// int_sort
Rcpp::IntegerVector int_sort(Rcpp::IntegerVector x, bool dsc);
RcppExport SEXP _FBNNet_int_sort(SEXP xSEXP, SEXP dscSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type dsc(dscSEXP);
    rcpp_result_gen = Rcpp::wrap(int_sort(x, dsc));
    return rcpp_result_gen;
END_RCPP
}
// num_sort
Rcpp::NumericVector num_sort(Rcpp::NumericVector x, bool dsc);
RcppExport SEXP _FBNNet_num_sort(SEXP xSEXP, SEXP dscSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< bool >::type dsc(dscSEXP);
    rcpp_result_gen = Rcpp::wrap(num_sort(x, dsc));
    return rcpp_result_gen;
END_RCPP
}
// convertStringIntoVector
Rcpp::CharacterVector convertStringIntoVector(std::string value, int outputType, bool lowerCase);
RcppExport SEXP _FBNNet_convertStringIntoVector(SEXP valueSEXP, SEXP outputTypeSEXP, SEXP lowerCaseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type value(valueSEXP);
    Rcpp::traits::input_parameter< int >::type outputType(outputTypeSEXP);
    Rcpp::traits::input_parameter< bool >::type lowerCase(lowerCaseSEXP);
    rcpp_result_gen = Rcpp::wrap(convertStringIntoVector(value, outputType, lowerCase));
    return rcpp_result_gen;
END_RCPP
}
// subCPP
Rcpp::CharacterVector subCPP(Rcpp::CharacterVector pattern, Rcpp::CharacterVector replacement, Rcpp::CharacterVector x);
RcppExport SEXP _FBNNet_subCPP(SEXP patternSEXP, SEXP replacementSEXP, SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type pattern(patternSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type replacement(replacementSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(subCPP(pattern, replacement, x));
    return rcpp_result_gen;
END_RCPP
}
// splitExpression
Rcpp::CharacterVector splitExpression(Rcpp::CharacterVector expression, int outputType, bool lowerCase);
RcppExport SEXP _FBNNet_splitExpression(SEXP expressionSEXP, SEXP outputTypeSEXP, SEXP lowerCaseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type expression(expressionSEXP);
    Rcpp::traits::input_parameter< int >::type outputType(outputTypeSEXP);
    Rcpp::traits::input_parameter< bool >::type lowerCase(lowerCaseSEXP);
    rcpp_result_gen = Rcpp::wrap(splitExpression(expression, outputType, lowerCase));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_FBNNet_extractGeneStateFromTimeSeriesCube", (DL_FUNC) &_FBNNet_extractGeneStateFromTimeSeriesCube, 2},
    {"_FBNNet_extractGeneStates", (DL_FUNC) &_FBNNet_extractGeneStates, 2},
    {"_FBNNet_generateTemporalGeneStates", (DL_FUNC) &_FBNNet_generateTemporalGeneStates, 4},
    {"_FBNNet_getBasicMeasures", (DL_FUNC) &_FBNNet_getBasicMeasures, 12},
    {"_FBNNet_getGenePrababilities_basic", (DL_FUNC) &_FBNNet_getGenePrababilities_basic, 6},
    {"_FBNNet_getAdvancedMeasures", (DL_FUNC) &_FBNNet_getAdvancedMeasures, 1},
    {"_FBNNet_getGenePrababilities_advanced", (DL_FUNC) &_FBNNet_getGenePrababilities_advanced, 1},
    {"_FBNNet_getGenePrababilities", (DL_FUNC) &_FBNNet_getGenePrababilities, 6},
    {"_FBNNet_networkFiltering", (DL_FUNC) &_FBNNet_networkFiltering, 1},
    {"_FBNNet_getGenePrababilities_measurements", (DL_FUNC) &_FBNNet_getGenePrababilities_measurements, 6},
    {"_FBNNet_buildProbabilityTreeOnTargetGene", (DL_FUNC) &_FBNNet_buildProbabilityTreeOnTargetGene, 10},
    {"_FBNNet_process_cube_algorithm", (DL_FUNC) &_FBNNet_process_cube_algorithm, 5},
    {"_FBNNet_to_string", (DL_FUNC) &_FBNNet_to_string, 1},
    {"_FBNNet_mpaste", (DL_FUNC) &_FBNNet_mpaste, 2},
    {"_FBNNet_concatenator", (DL_FUNC) &_FBNNet_concatenator, 2},
    {"_FBNNet_concatenatorI", (DL_FUNC) &_FBNNet_concatenatorI, 2},
    {"_FBNNet_concatenatorN", (DL_FUNC) &_FBNNet_concatenatorN, 2},
    {"_FBNNet_mcbind", (DL_FUNC) &_FBNNet_mcbind, 2},
    {"_FBNNet_mrbind", (DL_FUNC) &_FBNNet_mrbind, 2},
    {"_FBNNet_isReallyNA", (DL_FUNC) &_FBNNet_isReallyNA, 1},
    {"_FBNNet_countZeros", (DL_FUNC) &_FBNNet_countZeros, 1},
    {"_FBNNet_fisher_test_cpp", (DL_FUNC) &_FBNNet_fisher_test_cpp, 2},
    {"_FBNNet_substractM", (DL_FUNC) &_FBNNet_substractM, 2},
    {"_FBNNet_matchCount", (DL_FUNC) &_FBNNet_matchCount, 2},
    {"_FBNNet_dround", (DL_FUNC) &_FBNNet_dround, 2},
    {"_FBNNet_a_in_b", (DL_FUNC) &_FBNNet_a_in_b, 2},
    {"_FBNNet_a_in_b_index", (DL_FUNC) &_FBNNet_a_in_b_index, 2},
    {"_FBNNet_a_not_in_b", (DL_FUNC) &_FBNNet_a_not_in_b, 2},
    {"_FBNNet_a_not_in_b_index", (DL_FUNC) &_FBNNet_a_not_in_b_index, 2},
    {"_FBNNet_resizel", (DL_FUNC) &_FBNNet_resizel, 2},
    {"_FBNNet_orderByname", (DL_FUNC) &_FBNNet_orderByname, 2},
    {"_FBNNet_removeEmptyElement", (DL_FUNC) &_FBNNet_removeEmptyElement, 1},
    {"_FBNNet_char_sort", (DL_FUNC) &_FBNNet_char_sort, 2},
    {"_FBNNet_int_sort", (DL_FUNC) &_FBNNet_int_sort, 2},
    {"_FBNNet_num_sort", (DL_FUNC) &_FBNNet_num_sort, 2},
    {"_FBNNet_convertStringIntoVector", (DL_FUNC) &_FBNNet_convertStringIntoVector, 3},
    {"_FBNNet_subCPP", (DL_FUNC) &_FBNNet_subCPP, 3},
    {"_FBNNet_splitExpression", (DL_FUNC) &_FBNNet_splitExpression, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_FBNNet(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
